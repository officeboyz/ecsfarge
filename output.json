[0m[1mvar.api_key[0m
  API key for accessing the service

  [1mEnter a value:[0m [0m
[0m[1maws_s3_bucket.cloudtrail_logs: Refreshing state... [id=ouroboros-cloudtrail-logs-prod][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # aws_cloudtrail.main_cloudtrail[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudtrail" "main_cloudtrail" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m enable_log_file_validation    = true
      [32m+[0m[0m enable_logging                = true
      [32m+[0m[0m home_region                   = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m include_global_service_events = true
      [32m+[0m[0m is_multi_region_trail         = true
      [32m+[0m[0m is_organization_trail         = false
      [32m+[0m[0m name                          = "ouroboros-cloudtrail-refresh"
      [32m+[0m[0m s3_bucket_name                = "ouroboros-cloudtrail-logs-prod"
      [32m+[0m[0m tags_all                      = (known after apply)

      [32m+[0m[0m event_selector {
          [32m+[0m[0m include_management_events = true
          [32m+[0m[0m read_write_type           = "All"

          [32m+[0m[0m data_resource {
              [32m+[0m[0m type   = "AWS::S3::Object"
              [32m+[0m[0m values = [
                  [32m+[0m[0m "arn:aws:s3:::",
                ]
            }
        }
    }

[1m  # aws_internet_gateway.igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "PublicSubnetIGW"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "PublicSubnetIGW"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # aws_s3_bucket_policy.cloudtrail_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "cloudtrail_policy" {
      [32m+[0m[0m bucket = "ouroboros-cloudtrail-logs-prod"
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "s3:GetBucketAcl"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "cloudtrail.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = "arn:aws:s3:::ouroboros-cloudtrail-logs-prod"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "s3:PutObject"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "s3:x-amz-acl" = "bucket-owner-full-control"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "cloudtrail.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = "arn:aws:s3:::ouroboros-cloudtrail-logs-prod/*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
    }

[1m  # aws_vpc.main_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main_vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m assign_generated_ipv6_cidr_block     = true
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "MainVPC"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "MainVPC"
        }
    }

[1m  # module.private_subnet.aws_ecs_cluster.ouroboros-app-cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_cluster" "ouroboros-app-cluster" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m name     = "ouroboros-app-ecs"
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "Ouroboros_Cluster"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "Ouroboros_Cluster"
        }
    }

[1m  # module.private_subnet.aws_egress_only_internet_gateway.ipv6_igw[0m will be created
[0m  [32m+[0m[0m resource "aws_egress_only_internet_gateway" "ipv6_igw" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "private-egress-igw"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "private-egress-igw"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.private_subnet.aws_network_acl.private_subnet_acl[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl" "private_subnet_acl" {
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m egress     = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m ingress    = (known after apply)
      [32m+[0m[0m owner_id   = (known after apply)
      [32m+[0m[0m subnet_ids = (known after apply)
      [32m+[0m[0m tags       = {
          [32m+[0m[0m "Name" = "private-subnet-nacl"
        }
      [32m+[0m[0m tags_all   = {
          [32m+[0m[0m "Name" = "private-subnet-nacl"
        }
      [32m+[0m[0m vpc_id     = (known after apply)
    }

[1m  # module.private_subnet.aws_network_acl_association.private_subnet_nacl_association["us-east-2a"][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "private_subnet_nacl_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.private_subnet.aws_network_acl_association.private_subnet_nacl_association["us-east-2b"][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "private_subnet_nacl_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.private_subnet.aws_network_acl_association.private_subnet_nacl_association["us-east-2c"][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "private_subnet_nacl_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.private_subnet.aws_route_table.private_route_table[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_route_table" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = ""
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = (known after apply)
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = "::/0"
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = (known after apply)
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "PrivateSubnetRouteTable"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "PrivateSubnetRouteTable"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.private_subnet.aws_route_table.private_route_table[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_route_table" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = ""
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = (known after apply)
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = "::/0"
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = (known after apply)
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "PrivateSubnetRouteTable"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "PrivateSubnetRouteTable"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.private_subnet.aws_route_table.private_route_table[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_route_table" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = ""
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = (known after apply)
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = "::/0"
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = (known after apply)
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "PrivateSubnetRouteTable"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "PrivateSubnetRouteTable"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.private_subnet.aws_route_table_association.private_subnet_association[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.private_subnet.aws_route_table_association.private_subnet_association[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.private_subnet.aws_route_table_association.private_subnet_association[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.private_subnet.aws_subnet.private_subnet["us-east-2a"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.240.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "PrivateSubnet-us-east-2a"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "PrivateSubnet-us-east-2a"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.private_subnet.aws_subnet.private_subnet["us-east-2b"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.241.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "PrivateSubnet-us-east-2b"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "PrivateSubnet-us-east-2b"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.private_subnet.aws_subnet.private_subnet["us-east-2c"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-2c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.242.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "PrivateSubnet-us-east-2c"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "PrivateSubnet-us-east-2c"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.public_subnet.aws_network_acl_association.public_subnet_nacl_association["us-east-2a"][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "public_subnet_nacl_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.public_subnet.aws_network_acl_association.public_subnet_nacl_association["us-east-2b"][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "public_subnet_nacl_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.public_subnet.aws_network_acl_association.public_subnet_nacl_association["us-east-2c"][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "public_subnet_nacl_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.public_subnet.aws_route_table.public_route_table[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public_route_table" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = ""
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = "::/0"
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "PublicSubnetRouteTable"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "PublicSubnetRouteTable"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.public_subnet.aws_route_table_association.public_subnet_route_table_association["us-east-2a"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_route_table_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.public_subnet.aws_route_table_association.public_subnet_route_table_association["us-east-2b"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_route_table_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.public_subnet.aws_route_table_association.public_subnet_route_table_association["us-east-2c"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_route_table_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.public_subnet.aws_subnet.public_subnet["us-east-2a"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "PublicSubnet-us-east-2a"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "PublicSubnet-us-east-2a"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.public_subnet.aws_subnet.public_subnet["us-east-2b"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "PublicSubnet-us-east-2b"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "PublicSubnet-us-east-2b"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.public_subnet.aws_subnet.public_subnet["us-east-2c"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-2c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "PublicSubnet-us-east-2c"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "PublicSubnet-us-east-2c"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.sandbox.aws_cloudwatch_log_group.flow_log_group[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "flow_log_group" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "vpc-flow-logs-group-sandbox"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 0
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = (known after apply)
    }

[1m  # module.sandbox.aws_ecr_repository.sandbox_repository[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "sandbox_repository" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "app-repository-sandbox-3"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "environment" = "sandbox"
        }

      [32m+[0m[0m image_scanning_configuration {
          [32m+[0m[0m scan_on_push = true
        }
    }

[1m  # module.sandbox.aws_flow_log.vpc_flow_log[0m will be created
[0m  [32m+[0m[0m resource "aws_flow_log" "vpc_flow_log" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m iam_role_arn             = (known after apply)
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m log_destination          = (known after apply)
      [32m+[0m[0m log_destination_type     = "cloud-watch-logs"
      [32m+[0m[0m log_format               = (known after apply)
      [32m+[0m[0m log_group_name           = (known after apply)
      [32m+[0m[0m max_aggregation_interval = 600
      [32m+[0m[0m tags_all                 = (known after apply)
      [32m+[0m[0m traffic_type             = "ALL"
      [32m+[0m[0m vpc_id                   = (known after apply)
    }

[1m  # module.sandbox.aws_iam_instance_profile.ecs_execution_profile[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "ecs_execution_profile" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m create_date = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "sandbox_ecs_execution_profile"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m role        = "ecs_execution_role_sandbox"
      [32m+[0m[0m tags_all    = (known after apply)
      [32m+[0m[0m unique_id   = (known after apply)
    }

[1m  # module.sandbox.aws_iam_role.flow_log_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "flow_log_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "vpc-flow-logs.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "flow_log_role_sandbox"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.sandbox.aws_iam_role_policy.flow_log_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "flow_log_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "sandbox_flow_log_policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.sandbox.aws_instance.ec2_test[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "ec2_test" {
      [32m+[0m[0m ami                                  = "ami-080e449218d4434fa"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = "sandbox_ecs_execution_profile"
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "test"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name"        = "ECR-Connectivity-Test"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name"        = "ECR-Connectivity-Test"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = "786037b06fe5ecf6eef4a9d41fe2f71210c79639"
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)
    }

[1m  # module.sandbox.aws_internet_gateway.app_igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "app_igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name"        = "app-igw"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name"        = "app-igw"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.sandbox.aws_key_pair.bastion_key[0m will be created
[0m  [32m+[0m[0m resource "aws_key_pair" "bastion_key" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m fingerprint     = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m key_name        = "bastion_key_sandbox"
      [32m+[0m[0m key_name_prefix = (known after apply)
      [32m+[0m[0m key_pair_id     = (known after apply)
      [32m+[0m[0m key_type        = (known after apply)
      [32m+[0m[0m public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsjP2tcr3p4b4twV2erlE5AYvKXDwuf9qL0YTPV13O9NSzDp4nL6EtOuwKQBO7zm35bpHZBoCSSicHCuGY9kv6renmOYSQlfEV5fvup7PZJILVLYwolkowb8iLvTSdMpriHS6rV/OBR5irTUh0rZFw8Sx8FnoBLjCiTbkG/4+cJtp+w7wBPVA3tWM9cYAude3p41tHStPN+48gdPWrewdJH6knbDgdOR/qcS9774dSGXZQXpwpelPv5JMZo39hiAb2ZMx3YL+AMu5HZ+ySVIvEEPwqG+K0urgtcbFm3KSvXClv7bBHBudLkLNxMlwe+r4x2rH/lOHlQkeVxyn/AgfB sonjaya@coindos-MBP"
      [32m+[0m[0m tags_all        = (known after apply)
    }

[1m  # module.sandbox.aws_launch_template.bastion_lt[0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "bastion_lt" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m image_id               = "ami-080e449218d4434fa"
      [32m+[0m[0m instance_type          = "t2.micro"
      [32m+[0m[0m key_name               = "bastion_key_sandbox"
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "sandbox-bastion-lt-"
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m user_data              = "IyEvYmluL2Jhc2gKeXVtIHVwZGF0ZSAteQphbWF6b24tbGludXgtZXh0cmFzIGluc3RhbGwgZG9ja2VyIC15CnNlcnZpY2UgZG9ja2VyIHN0YXJ0CnVzZXJtb2QgLWEgLUcgZG9ja2VyIGVjMi11c2VyCmF3cyBlY3IgZ2V0LWxvZ2luLXBhc3N3b3JkIC0tcmVnaW9uIHVzLWVhc3QtMiB8IGRvY2tlciBsb2dpbiAtLXVzZXJuYW1lIEFXUyAtLXBhc3N3b3JkLXN0ZGluICQoYXdzIHN0cyBnZXQtY2FsbGVyLWlkZW50aXR5IC0tcXVlcnkgJ0FjY291bnQnIC0tb3V0cHV0IHRleHQpLmRrci5lY3IudXMtZWFzdC0yLmFtYXpvbmF3cy5jb20vYXBwLXJlcG9zaXRvcnktc2FuZGJveC0zCmRvY2tlciBwdWxsICQoYXdzIHN0cyBnZXQtY2FsbGVyLWlkZW50aXR5IC0tcXVlcnkgJ0FjY291bnQnIC0tb3V0cHV0IHRleHQpLmRrci5lY3IudXMtZWFzdC0yLmFtYXpvbmF3cy5jb20vYXBwLXJlcG9zaXRvcnktc2FuZGJveC0zOmxhdGVzdAo="
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m iam_instance_profile {
          [32m+[0m[0m name = "sandbox_ecs_execution_profile"
        }

      [32m+[0m[0m network_interfaces {
          [32m+[0m[0m associate_public_ip_address = "true"
          [32m+[0m[0m delete_on_termination       = "true"
          [32m+[0m[0m security_groups             = (known after apply)
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Name"        = "sandbox-bastion-autoscaling-instance"
              [32m+[0m[0m "environment" = "sandbox"
            }
        }
    }

[1m  # module.sandbox.aws_lb.sandbox_alb[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "sandbox_alb" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "sandbox-alb-2"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "Name"        = "sandbox-alb"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Name"        = "sandbox-alb"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)
    }

[1m  # module.sandbox.aws_lb_listener.app_alb_listener[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "app_alb_listener" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 80
      [32m+[0m[0m protocol          = "HTTP"
      [32m+[0m[0m ssl_policy        = (known after apply)
      [32m+[0m[0m tags_all          = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # module.sandbox.aws_lb_target_group.sandbox_tg[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "sandbox_tg" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "sandbox-tg-2"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 80
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "sandbox-target-group"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "sandbox-target-group"
        }
      [32m+[0m[0m target_type                        = "ip"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 2
          [32m+[0m[0m interval            = 30
          [32m+[0m[0m matcher             = "200"
          [32m+[0m[0m path                = "/"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 5
          [32m+[0m[0m unhealthy_threshold = 2
        }
    }

[1m  # module.sandbox.aws_network_acl.open_nacl[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl" "open_nacl" {
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m egress     = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m ingress    = (known after apply)
      [32m+[0m[0m owner_id   = (known after apply)
      [32m+[0m[0m subnet_ids = (known after apply)
      [32m+[0m[0m tags       = {
          [32m+[0m[0m "Name"        = "open-nacl-sandbox"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all   = {
          [32m+[0m[0m "Name"        = "open-nacl-sandbox"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m vpc_id     = (known after apply)
    }

[1m  # module.sandbox.aws_network_acl_association.subnet_1_association[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "subnet_1_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.sandbox.aws_network_acl_association.subnet_2_association[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "subnet_2_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.sandbox.aws_network_acl_rule.egress_allow_all[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "egress_allow_all" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 0
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "-1"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 100
      [32m+[0m[0m to_port        = 0
    }

[1m  # module.sandbox.aws_network_acl_rule.ingress_allow_all[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ingress_allow_all" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 0
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "-1"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 100
      [32m+[0m[0m to_port        = 0
    }

[1m  # module.sandbox.aws_route_table.app_rt[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "app_rt" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name"        = "app-route-table-sandbox"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name"        = "app-route-table-sandbox"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.sandbox.aws_route_table_association.app_subnet_1_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "app_subnet_1_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.sandbox.aws_route_table_association.app_subnet_2_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "app_subnet_2_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.sandbox.aws_security_group.app_alb_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "app_alb_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for the application load balancer"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = "sandbox-alb-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"        = "sandbox alb sg"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"        = "sandbox alb sg"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.sandbox.aws_security_group.sandbox_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "sandbox_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for app allowing all traffic"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m name                   = "sandbox-sg-2"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "app-security-group"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "app-security-group"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.sandbox.aws_subnet.app_subnet_1a[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "app_subnet_1a" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "app-subnet-1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "app-subnet-1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.sandbox.aws_subnet.app_subnet_2a[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "app_subnet_2a" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "app-subnet-2"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "app-subnet-2"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.sandbox.aws_vpc.sandbox_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "sandbox_vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name"        = "sandbox-vpc"
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name"        = "sandbox-vpc"
          [32m+[0m[0m "environment" = "sandbox"
        }
    }

[1m  # module.security_group_config.aws_security_group.alb_security_group[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "alb_security_group" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for the ouroboros-chat-tls-balancer"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "ouroboros-chat-alb-sg-prod"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security_group_config.aws_security_group.bastion_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "bastion_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for the bastion"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "bastion-security-group-prod"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security_group_config.aws_security_group.ecs_task_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ecs_task_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for ECS tasks, permitting traffic from the ALB and to virtual endpoints."
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "ecs-task-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security_group_config.aws_security_group.virtual_endpoints_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "virtual_endpoints_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for virtual endpoints with explicit ingress rules."
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "virtual-endpoints-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "VirtualEndpointsSG"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "VirtualEndpointsSG"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.private_subnet.module.acls.aws_network_acl_rule.allow_all_inbound_443[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "allow_all_inbound_443" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 443
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 203
      [32m+[0m[0m to_port        = 443
    }

[1m  # module.private_subnet.module.acls.aws_network_acl_rule.allow_all_inbound_443_ipv6[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "allow_all_inbound_443_ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = "::/0"
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 204
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.private_subnet.module.acls.aws_network_acl_rule.allow_all_outbound_443[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "allow_all_outbound_443" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 443
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 200
      [32m+[0m[0m to_port        = 443
    }

[1m  # module.private_subnet.module.acls.aws_network_acl_rule.allow_all_outbound_443_ipv6[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "allow_all_outbound_443_ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = "::/0"
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 201
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.private_subnet.module.execution-role.aws_iam_policy.ecs_ecr_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "ecs_ecr_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Allows ECS tasks to pull images from ECR"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "ecs_ecr_policy_refresh"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecr:GetAuthorizationToken",
                          [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
                          [32m+[0m[0m "ecr:GetDownloadUrlForLayer",
                          [32m+[0m[0m "ecr:BatchGetImage",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.private_subnet.module.execution-role.aws_iam_policy.ecs_logs_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "ecs_logs_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Allows ECS tasks to send logs to CloudWatch"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "ecs_logs_policy_refresh"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:log-group:/ecs/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.private_subnet.module.execution-role.aws_iam_role.ecs_execution_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_execution_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = [
                              [32m+[0m[0m "ecs-tasks.amazonaws.com",
                              [32m+[0m[0m "ec2.amazonaws.com",
                            ]
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ecs_execution_role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name" = "ecs_execution_role"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name" = "ecs_execution_role"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.private_subnet.module.execution-role.aws_iam_role_policy_attachment.ecs_ecr_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ecs_ecr_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "ecs_execution_role"
    }

[1m  # module.private_subnet.module.execution-role.aws_iam_role_policy_attachment.ecs_execution_role_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ecs_execution_role_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      [32m+[0m[0m role       = "ecs_execution_role"
    }

[1m  # module.private_subnet.module.execution-role.aws_iam_role_policy_attachment.ecs_logs_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ecs_logs_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "ecs_execution_role"
    }

[1m  # module.private_subnet.module.service.aws_ecs_service.ouroboros_chat_service[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_service" "ouroboros_chat_service" {
      [32m+[0m[0m cluster                            = (known after apply)
      [32m+[0m[0m deployment_maximum_percent         = 200
      [32m+[0m[0m deployment_minimum_healthy_percent = 100
      [32m+[0m[0m desired_count                      = 1
      [32m+[0m[0m enable_ecs_managed_tags            = false
      [32m+[0m[0m enable_execute_command             = false
      [32m+[0m[0m iam_role                           = (known after apply)
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m launch_type                        = "FARGATE"
      [32m+[0m[0m name                               = "ouroboros-chat-service"
      [32m+[0m[0m platform_version                   = (known after apply)
      [32m+[0m[0m scheduling_strategy                = "REPLICA"
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m task_definition                    = (known after apply)
      [32m+[0m[0m triggers                           = (known after apply)
      [32m+[0m[0m wait_for_steady_state              = false

      [32m+[0m[0m load_balancer {
          [32m+[0m[0m container_name   = "webserver"
          [32m+[0m[0m container_port   = 8080
          [32m+[0m[0m target_group_arn = (known after apply)
        }

      [32m+[0m[0m network_configuration {
          [32m+[0m[0m assign_public_ip = true
          [32m+[0m[0m security_groups  = (known after apply)
          [32m+[0m[0m subnets          = (known after apply)
        }
    }

[1m  # module.private_subnet.module.task.aws_cloudwatch_log_group.ecs_log_group[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "ecs_log_group" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/ecs"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 14
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = (known after apply)
    }

[1m  # module.private_subnet.module.task.aws_ecs_task_definition.webserver[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_task_definition" "webserver" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m arn_without_revision     = (known after apply)
      [32m+[0m[0m container_definitions    = jsonencode(
            [
              [32m+[0m[0m {
                  [32m+[0m[0m cpu              = 0
                  [32m+[0m[0m environment      = [
                      [32m+[0m[0m {
                          [32m+[0m[0m name  = "API_KEY"
                          [32m+[0m[0m value = ""
                        },
                    ]
                  [32m+[0m[0m essential        = true
                  [32m+[0m[0m image            = "339713140717.dkr.ecr.us-east-2.amazonaws.com/ouroboros-ai-webserver:15"
                  [32m+[0m[0m logConfiguration = {
                      [32m+[0m[0m logDriver = "awslogs"
                      [32m+[0m[0m options   = {
                          [32m+[0m[0m awslogs-group         = "/ecs"
                          [32m+[0m[0m awslogs-region        = "us-east-2"
                          [32m+[0m[0m awslogs-stream-prefix = "ecs"
                        }
                    }
                  [32m+[0m[0m name             = "webserver"
                  [32m+[0m[0m portMappings     = [
                      [32m+[0m[0m {
                          [32m+[0m[0m containerPort = 8080
                          [32m+[0m[0m hostPort      = 8080
                          [32m+[0m[0m protocol      = "tcp"
                        },
                    ]
                },
            ]
        )
      [32m+[0m[0m cpu                      = "1024"
      [32m+[0m[0m execution_role_arn       = (known after apply)
      [32m+[0m[0m family                   = "Ouroboros-webserver"
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m memory                   = "2048"
      [32m+[0m[0m network_mode             = "awsvpc"
      [32m+[0m[0m requires_compatibilities = [
          [32m+[0m[0m "FARGATE",
        ]
      [32m+[0m[0m revision                 = (known after apply)
      [32m+[0m[0m skip_destroy             = false
      [32m+[0m[0m tags_all                 = (known after apply)
      [32m+[0m[0m task_role_arn            = (known after apply)
      [32m+[0m[0m track_latest             = false
    }

[1m  # module.public_subnet.module.bastion.data.aws_autoscaling_group.bastion_asg[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_autoscaling_group" "bastion_asg" {
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m availability_zones                    = (known after apply)
      [32m+[0m[0m default_cooldown                      = (known after apply)
      [32m+[0m[0m desired_capacity                      = (known after apply)
      [32m+[0m[0m desired_capacity_type                 = (known after apply)
      [32m+[0m[0m enabled_metrics                       = (known after apply)
      [32m+[0m[0m health_check_grace_period             = (known after apply)
      [32m+[0m[0m health_check_type                     = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m instance_maintenance_policy           = (known after apply)
      [32m+[0m[0m launch_configuration                  = (known after apply)
      [32m+[0m[0m launch_template                       = (known after apply)
      [32m+[0m[0m load_balancers                        = (known after apply)
      [32m+[0m[0m max_instance_lifetime                 = (known after apply)
      [32m+[0m[0m max_size                              = (known after apply)
      [32m+[0m[0m min_size                              = (known after apply)
      [32m+[0m[0m mixed_instances_policy                = (known after apply)
      [32m+[0m[0m name                                  = (known after apply)
      [32m+[0m[0m new_instances_protected_from_scale_in = (known after apply)
      [32m+[0m[0m placement_group                       = (known after apply)
      [32m+[0m[0m predicted_capacity                    = (known after apply)
      [32m+[0m[0m service_linked_role_arn               = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m suspended_processes                   = (known after apply)
      [32m+[0m[0m tag                                   = (known after apply)
      [32m+[0m[0m target_group_arns                     = (known after apply)
      [32m+[0m[0m termination_policies                  = (known after apply)
      [32m+[0m[0m traffic_source                        = (known after apply)
      [32m+[0m[0m vpc_zone_identifier                   = (known after apply)
      [32m+[0m[0m warm_pool                             = (known after apply)
      [32m+[0m[0m warm_pool_size                        = (known after apply)
    }

[1m  # module.public_subnet.module.bastion.data.aws_instances.bastion_host[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_instances" "bastion_host" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m ids            = (known after apply)
      [32m+[0m[0m instance_tags  = {
          [32m+[0m[0m "aws:autoscaling:groupName" = (known after apply)
        }
      [32m+[0m[0m ipv6_addresses = (known after apply)
      [32m+[0m[0m private_ips    = (known after apply)
      [32m+[0m[0m public_ips     = (known after apply)

      [32m+[0m[0m filter {
          [32m+[0m[0m name   = "instance-state-name"
          [32m+[0m[0m values = [
              [32m+[0m[0m "running",
            ]
        }
    }

[1m  # module.public_subnet.module.bastion.aws_autoscaling_group.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_group" "bastion" {
      [32m+[0m[0m arn                              = (known after apply)
      [32m+[0m[0m availability_zones               = (known after apply)
      [32m+[0m[0m default_cooldown                 = (known after apply)
      [32m+[0m[0m desired_capacity                 = (known after apply)
      [32m+[0m[0m force_delete                     = false
      [32m+[0m[0m force_delete_warm_pool           = false
      [32m+[0m[0m health_check_grace_period        = 300
      [32m+[0m[0m health_check_type                = (known after apply)
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_failed_scaling_activities = false
      [32m+[0m[0m load_balancers                   = (known after apply)
      [32m+[0m[0m max_size                         = 1
      [32m+[0m[0m metrics_granularity              = "1Minute"
      [32m+[0m[0m min_size                         = 1
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m name_prefix                      = (known after apply)
      [32m+[0m[0m predicted_capacity               = (known after apply)
      [32m+[0m[0m protect_from_scale_in            = false
      [32m+[0m[0m service_linked_role_arn          = (known after apply)
      [32m+[0m[0m target_group_arns                = (known after apply)
      [32m+[0m[0m vpc_zone_identifier              = (known after apply)
      [32m+[0m[0m wait_for_capacity_timeout        = "10m"
      [32m+[0m[0m warm_pool_size                   = (known after apply)

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = "$Latest"
        }

      [32m+[0m[0m tag {
          [32m+[0m[0m key                 = "Name"
          [32m+[0m[0m propagate_at_launch = true
          [32m+[0m[0m value               = "Bastion Host"
        }
    }

[1m  # module.public_subnet.module.bastion.aws_cloudwatch_log_group.bastion_log_group[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "bastion_log_group" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "cloudwatch-logs"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 14
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = (known after apply)
    }

[1m  # module.public_subnet.module.bastion.aws_flow_log.bastion_flow_log[0m will be created
[0m  [32m+[0m[0m resource "aws_flow_log" "bastion_flow_log" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m iam_role_arn             = (known after apply)
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m log_destination          = (known after apply)
      [32m+[0m[0m log_destination_type     = "cloud-watch-logs"
      [32m+[0m[0m log_format               = "${start} ${interface-id} ${srcaddr} ${dstaddr} ${dstport} ${protocol} ${action} ${log-status}"
      [32m+[0m[0m log_group_name           = (known after apply)
      [32m+[0m[0m max_aggregation_interval = 600
      [32m+[0m[0m tags                     = {
          [32m+[0m[0m "Name" = "BastionFlowLog"
        }
      [32m+[0m[0m tags_all                 = {
          [32m+[0m[0m "Name" = "BastionFlowLog"
        }
      [32m+[0m[0m traffic_type             = "ALL"
      [32m+[0m[0m vpc_id                   = (known after apply)
    }

[1m  # module.public_subnet.module.bastion.aws_iam_role.flow_log_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "flow_log_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "vpc-flow-logs.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "flow-log-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.public_subnet.module.bastion.aws_iam_role_policy.flow_log_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "flow_log_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "flow-log-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.public_subnet.module.bastion.aws_key_pair.bastion_key[0m will be created
[0m  [32m+[0m[0m resource "aws_key_pair" "bastion_key" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m fingerprint     = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m key_name        = "bastion_key_pair_2"
      [32m+[0m[0m key_name_prefix = (known after apply)
      [32m+[0m[0m key_pair_id     = (known after apply)
      [32m+[0m[0m key_type        = (known after apply)
      [32m+[0m[0m public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsjP2tcr3p4b4twV2erlE5AYvKXDwuf9qL0YTPV13O9NSzDp4nL6EtOuwKQBO7zm35bpHZBoCSSicHCuGY9kv6renmOYSQlfEV5fvup7PZJILVLYwolkowb8iLvTSdMpriHS6rV/OBR5irTUh0rZFw8Sx8FnoBLjCiTbkG/4+cJtp+w7wBPVA3tWM9cYAude3p41tHStPN+48gdPWrewdJH6knbDgdOR/qcS9774dSGXZQXpwpelPv5JMZo39hiAb2ZMx3YL+AMu5HZ+ySVIvEEPwqG+K0urgtcbFm3KSvXClv7bBHBudLkLNxMlwe+r4x2rH/lOHlQkeVxyn/AgfB sonjaya@coindos-MBP"
      [32m+[0m[0m tags_all        = (known after apply)
    }

[1m  # module.public_subnet.module.bastion.aws_launch_template.bastion_lt[0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "bastion_lt" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m default_version = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m image_id        = "ami-080e449218d4434fa"
      [32m+[0m[0m instance_type   = "t2.micro"
      [32m+[0m[0m key_name        = "test"
      [32m+[0m[0m latest_version  = (known after apply)
      [32m+[0m[0m name            = "bastion-launch-template-prod-2"
      [32m+[0m[0m name_prefix     = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "name" = "bastion"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "name" = "bastion"
        }

      [32m+[0m[0m network_interfaces {
          [32m+[0m[0m associate_public_ip_address = "true"
          [32m+[0m[0m security_groups             = (known after apply)
        }
    }

[1m  # module.public_subnet.module.chat_tls_balancer.aws_lb.ouroboros_chat_tls_balancer[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "ouroboros_chat_tls_balancer" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = "dualstack"
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "ouroboros-chat-tls-balancer"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "Name" = "Ouroboros-Chat-ALB"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Name" = "Ouroboros-Chat-ALB"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)
    }

[1m  # module.public_subnet.module.nat["us-east-2a"].aws_eip.nat_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.public_subnet.module.nat["us-east-2a"].aws_nat_gateway.nat_gateway[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gateway" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "NATGateway"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "NATGateway"
        }
    }

[1m  # module.public_subnet.module.nat["us-east-2b"].aws_eip.nat_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.public_subnet.module.nat["us-east-2b"].aws_nat_gateway.nat_gateway[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gateway" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "NATGateway"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "NATGateway"
        }
    }

[1m  # module.public_subnet.module.nat["us-east-2c"].aws_eip.nat_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.public_subnet.module.nat["us-east-2c"].aws_nat_gateway.nat_gateway[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gateway" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "NATGateway"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "NATGateway"
        }
    }

[1m  # module.public_subnet.module.public_acl.aws_network_acl.public_subnet_acl[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl" "public_subnet_acl" {
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m egress     = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m ingress    = (known after apply)
      [32m+[0m[0m owner_id   = (known after apply)
      [32m+[0m[0m subnet_ids = (known after apply)
      [32m+[0m[0m tags       = {
          [32m+[0m[0m "Name" = "public-subnet-nacl"
        }
      [32m+[0m[0m tags_all   = {
          [32m+[0m[0m "Name" = "public-subnet-nacl"
        }
      [32m+[0m[0m vpc_id     = (known after apply)
    }

[1m  # module.sandbox.module.ecs_execution_role.aws_iam_role.ecs_execution_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_execution_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = [
                              [32m+[0m[0m "ecs-tasks.amazonaws.com",
                              [32m+[0m[0m "ec2.amazonaws.com",
                            ]
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ecs_execution_role_sandbox"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.sandbox.module.ecs_execution_role.aws_iam_role.ecs_task_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_task_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ecs_task_role_sandbox"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "environment" = "sandbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.sandbox.module.ecs_execution_role.aws_iam_role_policy_attachment.ecs_execution_role_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ecs_execution_role_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      [32m+[0m[0m role       = "ecs_execution_role_sandbox"
    }

[1m  # module.sandbox.module.ecs_execution_role.aws_iam_role_policy_attachment.ecs_execution_role_policy_attachment2[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ecs_execution_role_policy_attachment2" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      [32m+[0m[0m role       = "ecs_execution_role_sandbox"
    }

[1m  # module.sandbox.module.ecs_execution_role.aws_iam_role_policy_attachment.ecs_task_role_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ecs_task_role_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      [32m+[0m[0m role       = "ecs_task_role_sandbox"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.alb_sg_egress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "alb_sg_egress" {
      [32m+[0m[0m description              = "Allow application traffic from ALB to ECS task"
      [32m+[0m[0m from_port                = 8080
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8080
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.alb_sg_ingress_https_bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "alb_sg_ingress_https_bastion" {
      [32m+[0m[0m description              = "Explicitly allows bastion regardless of other rules"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.alb_sg_ingress_https_ipv4[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "alb_sg_ingress_https_ipv4" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allows all inbound ipv4 https traffic to alb"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.alb_sg_ingress_https_ipv6[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "alb_sg_ingress_https_ipv6" {
      [32m+[0m[0m description              = "Allows all inbound ipv6 https traffic to alb"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m ipv6_cidr_blocks         = [
          [32m+[0m[0m "::/0",
        ]
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.bastion_ingress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "bastion_ingress" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "SSH from anywhere"
      [32m+[0m[0m from_port                = 22
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 22
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.bastion_ingress_ipv6[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "bastion_ingress_ipv6" {
      [32m+[0m[0m description              = "SSH from anywhere"
      [32m+[0m[0m from_port                = 22
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m ipv6_cidr_blocks         = [
          [32m+[0m[0m "::/0",
        ]
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 22
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.bastion_ipv4_egress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "bastion_ipv4_egress" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all outbound ipv4 traffic"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.bastion_ipv6_egress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "bastion_ipv6_egress" {
      [32m+[0m[0m description              = "Allow all outbound ipv6 traffic"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m ipv6_cidr_blocks         = [
          [32m+[0m[0m "::/0",
        ]
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.ecs_task_egress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "ecs_task_egress" {
      [32m+[0m[0m description              = "Allow ECS task traffic to head towards virtual endpoints on HTTPS"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m ipv6_cidr_blocks         = [
          [32m+[0m[0m "::/0",
        ]
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.ecs_task_egress_hack[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "ecs_task_egress_hack" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow ECS task traffic to head towards anything because aws is behind the curve on ipv6 s3 gateways HTTPS"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.task_ingress_from_alb[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "task_ingress_from_alb" {
      [32m+[0m[0m description              = "Allow ecs task to receive alb traffic"
      [32m+[0m[0m from_port                = 8080
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8080
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.security_group_config.module.rule_implementations.aws_security_group_rule.virtual_endpoints_ingress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "virtual_endpoints_ingress" {
      [32m+[0m[0m description              = "Task traffic can enter virtual endpoints via https"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.public_subnet.module.chat_tls_balancer.module.listener.aws_lb_listener.https_listener[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "https_listener" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m certificate_arn   = "arn:aws:acm:us-east-2:339713140717:certificate/ece54212-154a-4f29-9783-adf80d69c8a8"
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 443
      [32m+[0m[0m protocol          = "HTTPS"
      [32m+[0m[0m ssl_policy        = "ELBSecurityPolicy-2016-08"
      [32m+[0m[0m tags_all          = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # module.public_subnet.module.chat_tls_balancer.module.traffic-group.aws_lb_target_group.ouroboros_chat_traffic_group[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "ouroboros_chat_traffic_group" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "ouroboros-chat-traffic-group"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 8080
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m target_type                        = "ip"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 5
          [32m+[0m[0m interval            = 30
          [32m+[0m[0m matcher             = "200"
          [32m+[0m[0m path                = "/checks/health"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 5
          [32m+[0m[0m unhealthy_threshold = 2
        }
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "10.0.0.0/20"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 8080
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 32
      [32m+[0m[0m to_port        = 8080
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 8080
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 64
      [32m+[0m[0m to_port         = 8080
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[1].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "10.0.240.0/20"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 8080
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 40
      [32m+[0m[0m to_port        = 8080
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[1].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 8080
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 72
      [32m+[0m[0m to_port         = 8080
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "10.0.0.0/20"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 8080
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 36
      [32m+[0m[0m to_port        = 8080
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 8080
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 68
      [32m+[0m[0m to_port         = 8080
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[1].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "10.0.240.0/20"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 8080
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 44
      [32m+[0m[0m to_port        = 8080
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[1].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 8080
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 76
      [32m+[0m[0m to_port         = 8080
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[1].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "10.0.0.0/20"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 443
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 33
      [32m+[0m[0m to_port        = 443
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[1].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 65
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[1].module.by_cidr["egress"].module.by_address_protocol[1].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "10.0.240.0/20"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 443
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 41
      [32m+[0m[0m to_port        = 443
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[1].module.by_cidr["egress"].module.by_address_protocol[1].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 73
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[1].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "10.0.0.0/20"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 443
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 37
      [32m+[0m[0m to_port        = 443
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[1].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 69
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[1].module.by_cidr["ingress"].module.by_address_protocol[1].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "10.0.240.0/20"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 443
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 45
      [32m+[0m[0m to_port        = 443
    }

[1m  # module.private_subnet.module.acls.module.rules.module.cartesian_product[1].module.by_cidr["ingress"].module.by_address_protocol[1].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 77
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.public_subnet.module.public_acl.module.bastion_ssh_exception.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 22
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 288
      [32m+[0m[0m to_port        = 22
    }

[1m  # module.public_subnet.module.public_acl.module.bastion_ssh_exception.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 22
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = "::/0"
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 320
      [32m+[0m[0m to_port         = 22
    }

[1m  # module.public_subnet.module.public_acl.module.bastion_ssh_exception.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 22
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 292
      [32m+[0m[0m to_port        = 22
    }

[1m  # module.public_subnet.module.public_acl.module.bastion_ssh_exception.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 22
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = "::/0"
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 324
      [32m+[0m[0m to_port         = 22
    }

[1m  # module.public_subnet.module.public_acl.module.inter-subnet-comms.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 8080
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 64
      [32m+[0m[0m to_port         = 8080
    }

[1m  # module.public_subnet.module.public_acl.module.inter-subnet-comms.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[1].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 8080
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 72
      [32m+[0m[0m to_port         = 8080
    }

[1m  # module.public_subnet.module.public_acl.module.inter-subnet-comms.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 8080
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 68
      [32m+[0m[0m to_port         = 8080
    }

[1m  # module.public_subnet.module.public_acl.module.inter-subnet-comms.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[1].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 8080
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 76
      [32m+[0m[0m to_port         = 8080
    }

[1m  # module.public_subnet.module.public_acl.module.inter-subnet-comms.module.cartesian_product[1].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 65
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.public_subnet.module.public_acl.module.inter-subnet-comms.module.cartesian_product[1].module.by_cidr["egress"].module.by_address_protocol[1].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 73
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.public_subnet.module.public_acl.module.inter-subnet-comms.module.cartesian_product[1].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 69
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.public_subnet.module.public_acl.module.inter-subnet-comms.module.cartesian_product[1].module.by_cidr["ingress"].module.by_address_protocol[1].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = (known after apply)
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 77
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.public_subnet.module.public_acl.module.load_balancer_exception.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 443
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 544
      [32m+[0m[0m to_port        = 443
    }

[1m  # module.public_subnet.module.public_acl.module.load_balancer_exception.module.cartesian_product[0].module.by_cidr["egress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = true
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = "::/0"
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 576
      [32m+[0m[0m to_port         = 443
    }

[1m  # module.public_subnet.module.public_acl.module.load_balancer_exception.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv4[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv4" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 443
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 548
      [32m+[0m[0m to_port        = 443
    }

[1m  # module.public_subnet.module.public_acl.module.load_balancer_exception.module.cartesian_product[0].module.by_cidr["ingress"].module.by_address_protocol[0].aws_network_acl_rule.ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "ipv6" {
      [32m+[0m[0m egress          = false
      [32m+[0m[0m from_port       = 443
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block = "::/0"
      [32m+[0m[0m network_acl_id  = (known after apply)
      [32m+[0m[0m protocol        = "tcp"
      [32m+[0m[0m rule_action     = "allow"
      [32m+[0m[0m rule_number     = 580
      [32m+[0m[0m to_port         = 443
    }

[1mPlan:[0m 138 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m alb_endpoint               = (known after apply)
  [32m+[0m[0m bastion_ips                = (known after apply)
  [32m+[0m[0m bastion_sg_id              = (known after apply)
  [32m+[0m[0m sandbox_ec2_test_public_ip = (known after apply)
  [32m+[0m[0m sandbox_ecr_url            = (known after apply)
  [32m+[0m[0m sandbox_instance_id        = (known after apply)
  [32m+[0m[0m vpc_id                     = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
